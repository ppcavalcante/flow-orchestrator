// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package workflow

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NodeStatusEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsNodeStatusEntry(buf []byte, offset flatbuffers.UOffsetT) *NodeStatusEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NodeStatusEntry{}
	x.Init(buf, n+offset)
	return x
}

func FinishNodeStatusEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsNodeStatusEntry(buf []byte, offset flatbuffers.UOffsetT) *NodeStatusEntry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NodeStatusEntry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedNodeStatusEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *NodeStatusEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NodeStatusEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NodeStatusEntry) NodeName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NodeStatusEntry) Status() NodeStatus {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return NodeStatus(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *NodeStatusEntry) MutateStatus(n NodeStatus) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func NodeStatusEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func NodeStatusEntryAddNodeName(builder *flatbuffers.Builder, nodeName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(nodeName), 0)
}
func NodeStatusEntryAddStatus(builder *flatbuffers.Builder, status NodeStatus) {
	builder.PrependInt8Slot(1, int8(status), 0)
}
func NodeStatusEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
